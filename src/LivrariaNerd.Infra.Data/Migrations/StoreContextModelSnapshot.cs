// <auto-generated />
using System;
using LivrariaNerd.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LivrariaNerd.Infra.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<string>("Nome")
                        .HasColumnName("nome");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnName("registro_ativo");

                    b.HasKey("Id");

                    b.ToTable("categorias");
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<int>("IdEstado")
                        .HasColumnName("id_estado");

                    b.Property<string>("Nome")
                        .HasColumnName("nome");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnName("registro_ativo");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.ToTable("cidades");
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro");

                    b.Property<string>("CEP")
                        .HasColumnName("cep");

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<int>("IdCidade")
                        .HasColumnName("id_cidade");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Logradouro")
                        .HasColumnName("logradouro");

                    b.Property<string>("Numero")
                        .HasColumnName("numero");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnName("registro_ativo");

                    b.HasKey("Id");

                    b.HasIndex("IdCidade");

                    b.HasIndex("IdUsuario");

                    b.ToTable("enderecos");
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<string>("Nome")
                        .HasColumnName("nome");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnName("registro_ativo");

                    b.Property<string>("Sigla")
                        .HasColumnName("sigla");

                    b.HasKey("Id");

                    b.ToTable("estados");
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Estoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto");

                    b.Property<int>("Quantidade")
                        .HasColumnName("quantidade");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnName("registro_ativo");

                    b.Property<string>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("IdProduto");

                    b.ToTable("estoques");
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnName("registro_ativo");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("pedidos");
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.PedidoProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnName("registro_ativo");

                    b.HasKey("Id");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProduto");

                    b.ToTable("pedidos_produtos");
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cor")
                        .HasColumnName("cor");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao");

                    b.Property<int>("IdCategoria")
                        .HasColumnName("id_categoria");

                    b.Property<string>("Imagem")
                        .HasColumnName("imagem");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasMaxLength(100);

                    b.Property<int>("Peso")
                        .HasColumnName("peso");

                    b.Property<int>("Preco")
                        .HasColumnName("preco");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnName("registro_ativo");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.ToTable("produtos");
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Identity.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnName("data_ultima_atualizacao");

                    b.Property<string>("Login")
                        .HasColumnName("login");

                    b.Property<string>("NomeCompleto")
                        .HasColumnName("nome_completo");

                    b.Property<bool>("RegistroAtivo")
                        .HasColumnName("registro_ativo");

                    b.Property<string>("Senha")
                        .HasColumnName("senha");

                    b.HasKey("Id");

                    b.ToTable("usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataUltimaAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Login = "guilherme",
                            NomeCompleto = "Guilherme",
                            RegistroAtivo = true,
                            Senha = "123"
                        });
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Cidade", b =>
                {
                    b.HasOne("LivrariaNerd.Domain.Entities.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("LivrariaNerd.Domain.Entities.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("IdCidade")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LivrariaNerd.Domain.Identity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Estoque", b =>
                {
                    b.HasOne("LivrariaNerd.Domain.Entities.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Pedido", b =>
                {
                    b.HasOne("LivrariaNerd.Domain.Identity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.PedidoProduto", b =>
                {
                    b.HasOne("LivrariaNerd.Domain.Entities.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LivrariaNerd.Domain.Entities.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivrariaNerd.Domain.Entities.Produto", b =>
                {
                    b.HasOne("LivrariaNerd.Domain.Entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
